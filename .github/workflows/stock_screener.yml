name: Stock Screener

on:
  schedule:
    - cron: '30 6 * * 1-5'  # 每个工作日 14:30 (北京时间)运行
  workflow_dispatch:  # 允许手动触发

jobs:
  screen:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install akshare==1.11.11
        pip install pandas==1.5.3
        pip install flask==2.3.3
        pip install flask-cors==4.0.0
        
    - name: Run stock screener
      run: |
        python -c "
        import akshare as ak
        import pandas as pd
        from datetime import datetime
        
        def calculate_strength(df):
            # 计算强度指标
            df['量比得分'] = df['量比'].apply(lambda x: min(5, x * 0.8))  # 量比得分优化
            df['换手率得分'] = df['换手率'].apply(lambda x: min(3, x * 0.3))  # 换手率得分优化
            df['涨跌得分'] = df['涨跌幅'].apply(lambda x: min(2, max(0, x * 0.2)))  # 涨跌得分优化
            df['强度得分'] = (df['量比得分'] * 1.2 +  # 加权计算
                          df['换手率得分'] * 1.1 +
                          df['涨跌得分']).round(2)
            return df
            
        def run_screener():
            try:
                print(f'开始运行时间: {datetime.now()}')
                df = ak.stock_zh_a_spot_em()
                
                if df is not None:
                    df = calculate_strength(df)
                    mask = (
                        (df['涨跌幅'] > 3) &         # 提高涨幅要求
                        (df['量比'] > 2.5) &         # 提高量比要求
                        (df['换手率'] > 4) &         # 提高换手率要求
                        (df['最新价'] > df['今开']) & # 收盘价高于开盘价
                        (df['最新价'] > 5)           # 股价过滤
                    )
                    result = df[mask].sort_values('强度得分', ascending=False).head(15)
                    result.to_csv('stock_data.csv', index=False)
                    print(f'筛选结果: {len(result)} 只股票')
                    print('\\n强势股排名:')
                    display = result[['代码', '名称', '最新价', '涨跌幅', '量比', '换手率', '强度得分']].head()
                    print(display.to_string())
                else:
                    print('数据获取失败')
            except Exception as e:
                print(f'运行错误: {str(e)}')
        
        run_screener()
        "
        
    - name: Upload results
      uses: actions/upload-artifact@v2
      with:
        name: stock-data
        path: stock_data.csv